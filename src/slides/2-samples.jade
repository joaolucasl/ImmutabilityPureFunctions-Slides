section
  h2 Immutability in JS isn't new stuff.
  span.fragment In fact it's been on ECMAScript since 1997 [1]
  img.fragment(src="img/string-97.png")
  small: a(href="http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf") [1] ECMAScript: A general purpose, cross-platform programming language  
section
  h2 All JS Primitives are Immutable.
section
  h3 Strings
  pre
    code
      |  let name = "Paulo Escobar";
      |  name[2] = "b";
      |  console.log(name); // Paulo Escobar
section
  h3 Numbers 
  pre
    code
      |  let num1 = 2;
      |  let num2 = 3;
      |  num2 - num1
      |  console.log(num2); // 3
section
  h3 Boolean
  pre
    code
      |  let truthful = true;
      |  truthful.length = 4; 
      |  console.log(truthful); // true

section
  h3 Symbols
  pre
    code
      |  let martha = Symbol('batSignal');
      |  martha.toString(); 
      |  console.log(martha); // 'Symbol(batSignal)' (String)

section
  h3 Arrays
  h5: i Well, Arrays...
  pre
    code
      |  let oddNumsToTen = [1, 3, 5, 7, 8, 9];
      |  let oddNumsToEleven = oddNumsToTen.push(11); 
      |  console.log(oddNumsToTen); // [1, 3, 5, 7, 8, 9, 11]
section(data-background-image="img/no.gif")
  section(data-background-color="rgba(0, 0, 0, 0.57)")
    h2 YEAH...NO.

section
  h3 Arrays
  h5: i No mutating operation, ES6 Style ;)
  pre
    code
      |  const oddNumsToTen = [1, 3, 5, 7, 8, 9];
      |  const oddNumsToEleven = [...oddNumsToTen, 11]; 
      |  console.log(oddNumsToTen); // [1, 3, 5, 7, 8, 9]
      |  console.log(oddNumsToEleven); // [1, 3, 5, 7, 8, 9, 11]
  
  h5.fragment Or the old hacky ES5 way!
  pre.fragment
    code
      |  const oddNumsToTen = [1, 3, 5, 7, 8, 9];
      |  const oddNumsToEleven = oddNumsToTen.slice().push(11);
      |  console.log(oddNumsToTen); // [1, 3, 5, 7, 8, 9]
      |  console.log(oddNumsToEleven); // [1, 3, 5, 7, 8, 9, 11]

section
  h3 Okay, but why should I care?
  h5 Some Pros:
  ul
    li  Thread Safety (No shared state!);
    li  Easier to trace bugs;
    li  Easier reasoning about code - It always means the same thing;
    li  Failure Atomicity - If code breaks in the middle of sth, there's hope;
  h5 And cons:
  ul
    li Our perception of the world is 
      i innevitably
      |  one of mutability;
    li Copying lots of data may have performance impacts
    li (???)

section(data-background-image="img/thumbs-up.gif")
  section(data-background-color="rgba(0, 0, 0, 0.6)")
    h2 (y)
section
  h2: b That stuff sounds awesome, aye?
  h3 How to apply it?

section(data-background-color="#898989")
  img(src="img/immutable-logo.png" style="border:none; box-shadow:none")
  h4 by Facebook
  h5 https://facebook.github.io/immutable-js/
  pre
    code
      |  const map1 = Immutable.Map({a:1, b:2, c:3});
      |  const map2 = map1.set('b', 50);
      |  map1.get('b'); // 2
      |  map2.get('b'); // 50

section(data-background-color="#63B132")
  h2: b Mori
  h4 Clojure's data structures for vanilla JS!
  h5 http://swannodette.github.io/mori/
  pre
    code(class="javascript")
      | const nums = mori.seq([1,2,3,4,5,5,7]);
      | const remainingNums = mori.drop(2, nums);
      | mori.clj_to_js(nums); // [1,2,3,4,5,5,7]
      | mori.clj_to_js(remainingNums); // [3,4,5,5,7]

section(data-background-color="#0E5081")
  h2: b Seamless Immutable
  h4 Vanilla compatibility focused Immutable data structures. 
  h5 https://github.com/rtfeldman/seamless-immutable
  pre
    code(class="javascript")
      | const bestHeroes = Immutable(["Spider Man", "Captain America", "Green Lantern"]);
      | bestHeroes[2] = "Batman";
      | console.log(bestHeroes[2]) // Green Lantern
